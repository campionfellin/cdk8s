// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`snapshot 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "data": Object {
      "redis-password": "SUV0TkhkNW4zYg==",
    },
    "kind": "Secret",
    "metadata": Object {
      "labels": Object {
        "app": "redis",
        "chart": "redis-12.7.4",
        "heritage": "Helm",
        "release": "hello-helm-redis-c87c6cc5",
      },
      "name": "hello-helm-redis-c87c6cc5",
      "namespace": "default",
    },
    "type": "Opaque",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "start-node.sh": "#!/bin/bash
is_boolean_yes() {
    local -r bool=\\"\${1:-}\\"
    # comparison is performed without regard to the case of alphabetic characters
    shopt -s nocasematch
    if [[ \\"$bool\\" = 1 || \\"$bool\\" =~ ^(yes|true)$ ]]; then
        true
    else
        false
    fi
}

HEADLESS_SERVICE=\\"hello-helm-redis-c87c6cc5-headless.default.svc.cluster.local\\"
REDIS_SERVICE=\\"hello-helm-redis-c87c6cc5.default.svc.cluster.local\\"

export REDIS_REPLICATION_MODE=\\"slave\\"
if [[ -z \\"$(getent ahosts \\"$HEADLESS_SERVICE\\" | grep -v \\"^$(hostname -i) \\")\\" ]]; then
  export REDIS_REPLICATION_MODE=\\"master\\"
fi

if [[ -n $REDIS_PASSWORD_FILE ]]; then
  password_aux=\`cat \${REDIS_PASSWORD_FILE}\`
  export REDIS_PASSWORD=$password_aux
fi

if [[ -n $REDIS_MASTER_PASSWORD_FILE ]]; then
  password_aux=\`cat \${REDIS_MASTER_PASSWORD_FILE}\`
  export REDIS_MASTER_PASSWORD=$password_aux
fi

if [[ \\"$REDIS_REPLICATION_MODE\\" == \\"master\\" ]]; then
  echo \\"I am master\\"
  if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
  fi
else
  if [[ ! -f /opt/bitnami/redis/etc/replica.conf ]];then
    cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf
  fi

  if is_boolean_yes \\"$REDIS_TLS_ENABLED\\"; then
    sentinel_info_command=\\"redis-cli -a $REDIS_PASSWORD -h $REDIS_SERVICE -p 26379 --tls --cert \${REDIS_TLS_CERT_FILE} --key \${REDIS_TLS_KEY_FILE} --cacert \${REDIS_TLS_CA_FILE} sentinel get-master-addr-by-name mymaster\\"
  else
    sentinel_info_command=\\"redis-cli -a $REDIS_PASSWORD -h $REDIS_SERVICE -p 26379 sentinel get-master-addr-by-name mymaster\\"
  fi
  REDIS_SENTINEL_INFO=($($sentinel_info_command))
  REDIS_MASTER_HOST=\${REDIS_SENTINEL_INFO[0]}
  REDIS_MASTER_PORT_NUMBER=\${REDIS_SENTINEL_INFO[1]}


  # Immediately attempt to connect to the reported master. If it doesn't exist the connection attempt will either hang
  # or fail with \\"port unreachable\\" and give no data. The liveness check will then timeout waiting for the redis
  # container to be ready and restart the it. By then the new master will likely have been elected
  if is_boolean_yes \\"$REDIS_TLS_ENABLED\\"; then
    sentinel_info_command=\\"redis-cli -a $REDIS_PASSWORD -h $REDIS_MASTER_HOST -p 26379 --tls --cert \${REDIS_TLS_CERT_FILE} --key \${REDIS_TLS_KEY_FILE} --cacert \${REDIS_TLS_CA_FILE} sentinel get-master-addr-by-name mymaster\\"
  else
    sentinel_info_command=\\"redis-cli -a $REDIS_PASSWORD -h $REDIS_MASTER_HOST -p 26379 sentinel get-master-addr-by-name mymaster\\"
  fi

  if [[ ! ($($sentinel_info_command)) ]]; then
    # master doesn't actually exist, this probably means the remaining pods haven't elected a new one yet
    # and are reporting the old one still. Once this happens the container will get stuck and never see the new
    # master. We stop here to allow the container to not pass the liveness check and be restarted.
    exit 1
  fi
fi

if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
  cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
fi
ARGS=(\\"--port\\" \\"\${REDIS_PORT}\\")

if [[ \\"$REDIS_REPLICATION_MODE\\" == \\"slave\\" ]]; then
  ARGS+=(\\"--slaveof\\" \\"\${REDIS_MASTER_HOST}\\" \\"\${REDIS_MASTER_PORT_NUMBER}\\")
fi
ARGS+=(\\"--requirepass\\" \\"\${REDIS_PASSWORD}\\")
ARGS+=(\\"--masterauth\\" \\"\${REDIS_MASTER_PASSWORD}\\")

if [[ \\"$REDIS_REPLICATION_MODE\\" == \\"master\\" ]]; then
  ARGS+=(\\"--include\\" \\"/opt/bitnami/redis/etc/master.conf\\")
else
  ARGS+=(\\"--include\\" \\"/opt/bitnami/redis/etc/replica.conf\\")
fi

ARGS+=(\\"--include\\" \\"/opt/bitnami/redis/etc/redis.conf\\")
exec /run.sh \\"\${ARGS[@]}\\"
",
      "start-sentinel.sh": "#!/bin/bash
replace_in_file() {
    local filename=\\"\${1:?filename is required}\\"
    local match_regex=\\"\${2:?match regex is required}\\"
    local substitute_regex=\\"\${3:?substitute regex is required}\\"
    local posix_regex=\${4:-true}

    local result

    # We should avoid using 'sed in-place' substitutions
    # 1) They are not compatible with files mounted from ConfigMap(s)
    # 2) We found incompatibility issues with Debian10 and \\"in-place\\" substitutions
    del=$'\\\\001' # Use a non-printable character as a 'sed' delimiter to avoid issues
    if [[ $posix_regex = true ]]; then
        result=\\"$(sed -E \\"s\${del}\${match_regex}\${del}\${substitute_regex}\${del}g\\" \\"$filename\\")\\"
    else
        result=\\"$(sed \\"s\${del}\${match_regex}\${del}\${substitute_regex}\${del}g\\" \\"$filename\\")\\"
    fi
    echo \\"$result\\" > \\"$filename\\"
}
sentinel_conf_set() {
    local -r key=\\"\${1:?missing key}\\"
    local value=\\"\${2:-}\\"

    # Sanitize inputs
    value=\\"\${value//\\\\\\\\/\\\\\\\\\\\\\\\\}\\"
    value=\\"\${value//&/\\\\\\\\&}\\"
    value=\\"\${value//\\\\?/\\\\\\\\?}\\"
    [[ \\"$value\\" = \\"\\" ]] && value=\\"\\\\\\"$value\\\\\\"\\"

    replace_in_file \\"/opt/bitnami/redis-sentinel/etc/sentinel.conf\\" \\"^#*\\\\s*\${key} .*\\" \\"\${key} \${value}\\" false
}
sentinel_conf_add() {
    echo $'\\\\n'\\"$@\\" >> \\"/opt/bitnami/redis-sentinel/etc/sentinel.conf\\"
}
is_boolean_yes() {
    local -r bool=\\"\${1:-}\\"
    # comparison is performed without regard to the case of alphabetic characters
    shopt -s nocasematch
    if [[ \\"$bool\\" = 1 || \\"$bool\\" =~ ^(yes|true)$ ]]; then
        true
    else
        false
    fi
}
host_id() {
  echo \\"$1\\" | openssl sha1 | awk '{print $2}'
}

HEADLESS_SERVICE=\\"hello-helm-redis-c87c6cc5-headless.default.svc.cluster.local\\"
REDIS_SERVICE=\\"hello-helm-redis-c87c6cc5.default.svc.cluster.local\\"

if [[ -n $REDIS_PASSWORD_FILE ]]; then
  password_aux=\`cat \${REDIS_PASSWORD_FILE}\`
  export REDIS_PASSWORD=$password_aux
fi

if [[ ! -f /opt/bitnami/redis-sentinel/etc/sentinel.conf ]]; then
  cp /opt/bitnami/redis-sentinel/mounted-etc/sentinel.conf /opt/bitnami/redis-sentinel/etc/sentinel.conf
  printf \\"\\\\nsentinel auth-pass %s %s\\" \\"mymaster\\" \\"$REDIS_PASSWORD\\" >> /opt/bitnami/redis-sentinel/etc/sentinel.conf
  printf \\"\\\\nrequirepass %s\\" \\"$REDIS_PASSWORD\\" >> /opt/bitnami/redis-sentinel/etc/sentinel.conf
fi

export REDIS_REPLICATION_MODE=\\"slave\\"
if [[ -z \\"$(getent ahosts \\"$HEADLESS_SERVICE\\" | grep -v \\"^$(hostname -i) \\")\\" ]]; then
  export REDIS_REPLICATION_MODE=\\"master\\"
fi

if [[ \\"$REDIS_REPLICATION_MODE\\" == \\"master\\" ]]; then
  REDIS_MASTER_HOST=\\"$(hostname -i)\\"
  REDIS_MASTER_PORT_NUMBER=\\"6379\\"
else
  if is_boolean_yes \\"$REDIS_SENTINEL_TLS_ENABLED\\"; then
    sentinel_info_command=\\"redis-cli -a $REDIS_PASSWORD -h $REDIS_SERVICE -p 26379 --tls --cert \${REDIS_SENTINEL_TLS_CERT_FILE} --key \${REDIS_SENTINEL_TLS_KEY_FILE} --cacert \${REDIS_SENTINEL_TLS_CA_FILE} sentinel get-master-addr-by-name mymaster\\"
  else
    sentinel_info_command=\\"redis-cli -a $REDIS_PASSWORD -h $REDIS_SERVICE -p 26379 sentinel get-master-addr-by-name mymaster\\"
  fi
  REDIS_SENTINEL_INFO=($($sentinel_info_command))
  REDIS_MASTER_HOST=\${REDIS_SENTINEL_INFO[0]}
  REDIS_MASTER_PORT_NUMBER=\${REDIS_SENTINEL_INFO[1]}

  # Immediately attempt to connect to the reported master. If it doesn't exist the connection attempt will either hang
  # or fail with \\"port unreachable\\" and give no data. The liveness check will then timeout waiting for the sentinel
  # container to be ready and restart the it. By then the new master will likely have been elected
  if is_boolean_yes \\"$REDIS_SENTINEL_TLS_ENABLED\\"; then
    sentinel_info_command=\\"redis-cli -a $REDIS_PASSWORD -h $REDIS_MASTER_HOST -p 26379 --tls --cert \${REDIS_SENTINEL_TLS_CERT_FILE} --key \${REDIS_SENTINEL_TLS_KEY_FILE} --cacert \${REDIS_SENTINEL_TLS_CA_FILE} sentinel get-master-addr-by-name mymaster\\"
  else
    sentinel_info_command=\\"redis-cli -a $REDIS_PASSWORD -h $REDIS_MASTER_HOST -p 26379 sentinel get-master-addr-by-name mymaster\\"
  fi

  if [[ ! ($($sentinel_info_command)) ]]; then
    # master doesn't actually exist, this probably means the remaining pods haven't elected a new one yet
    # and are reporting the old one still. Once this happens the container will get stuck and never see the new
    # master. We stop here to allow the container to not pass the liveness check and be restarted.
    exit 1
  fi
fi
sentinel_conf_set \\"sentinel monitor\\" \\"mymaster \\"$REDIS_MASTER_HOST\\" \\"$REDIS_MASTER_PORT_NUMBER\\" 2\\"

add_replica() {
  if [[ \\"$1\\" != \\"$REDIS_MASTER_HOST\\" ]]; then
    sentinel_conf_add \\"sentinel known-replica mymaster $1 6379\\"
  fi
}
exec redis-server /opt/bitnami/redis-sentinel/etc/sentinel.conf --sentinel
",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "labels": Object {
        "app": "redis",
        "chart": "redis-12.7.4",
        "heritage": "Helm",
        "release": "hello-helm-redis-c87c6cc5",
      },
      "name": "hello-helm-redis-c87c6cc5-scripts",
      "namespace": "default",
    },
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "master.conf": "dir /data
rename-command FLUSHDB \\"\\"
rename-command FLUSHALL \\"\\"",
      "redis.conf": "# User-supplied configuration:
# Enable AOF https://redis.io/topics/persistence#append-only-file
appendonly yes
# Disable RDB persistence, AOF persistence already enabled.
save \\"\\"",
      "replica.conf": "dir /data
slave-read-only yes
rename-command FLUSHDB \\"\\"
rename-command FLUSHALL \\"\\"",
      "sentinel.conf": "dir \\"/tmp\\"
bind 0.0.0.0
port 26379
sentinel monitor mymaster hello-helm-redis-c87c6cc5-node-0.hello-helm-redis-c87c6cc5-headless.default.svc.cluster.local 6379 2
sentinel down-after-milliseconds mymaster 60000
sentinel failover-timeout mymaster 18000
sentinel parallel-syncs mymaster 1",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "labels": Object {
        "app": "redis",
        "chart": "redis-12.7.4",
        "heritage": "Helm",
        "release": "hello-helm-redis-c87c6cc5",
      },
      "name": "hello-helm-redis-c87c6cc5",
      "namespace": "default",
    },
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "parse_sentinels.awk": "/ip/ {FOUND_IP=1}
/port/ {FOUND_PORT=1}
/runid/ {FOUND_RUNID=1}
!/ip|port|runid/ {
  if (FOUND_IP==1) {
    IP=$1; FOUND_IP=0;
  }
  else if (FOUND_PORT==1) {
    PORT=$1;
    FOUND_PORT=0;
  } else if (FOUND_RUNID==1) {
    printf \\"\\\\nsentinel known-sentinel mymaster %s %s %s\\", IP, PORT, $0; FOUND_RUNID=0;
  }
}",
      "ping_liveness_local.sh": "#!/bin/bash
export REDISCLI_AUTH=\\"$REDIS_PASSWORD\\"
response=$(
  timeout -s 3 $1 \\\\
  redis-cli \\\\
    -h localhost \\\\
    -p $REDIS_PORT \\\\
    ping
)
if [ \\"$response\\" != \\"PONG\\" ] && [ \\"$response\\" != \\"LOADING Redis is loading the dataset in memory\\" ]; then
  echo \\"$response\\"
  exit 1
fi",
      "ping_liveness_local_and_master.sh": "script_dir=\\"$(dirname \\"$0\\")\\"
exit_status=0
\\"$script_dir/ping_liveness_local.sh\\" $1 || exit_status=$?
\\"$script_dir/ping_liveness_master.sh\\" $1 || exit_status=$?
exit $exit_status",
      "ping_liveness_master.sh": "#!/bin/bash
export REDISCLI_AUTH=\\"$REDIS_MASTER_PASSWORD\\"
response=$(
  timeout -s 3 $1 \\\\
  redis-cli \\\\
    -h $REDIS_MASTER_HOST \\\\
    -p $REDIS_MASTER_PORT_NUMBER \\\\
    ping
)
if [ \\"$response\\" != \\"PONG\\" ] && [ \\"$response\\" != \\"LOADING Redis is loading the dataset in memory\\" ]; then
  echo \\"$response\\"
  exit 1
fi",
      "ping_readiness_local.sh": "#!/bin/bash
export REDISCLI_AUTH=\\"$REDIS_PASSWORD\\"
response=$(
  timeout -s 3 $1 \\\\
  redis-cli \\\\
    -h localhost \\\\
    -p $REDIS_PORT \\\\
    ping
)
if [ \\"$response\\" != \\"PONG\\" ]; then
  echo \\"$response\\"
  exit 1
fi",
      "ping_readiness_local_and_master.sh": "script_dir=\\"$(dirname \\"$0\\")\\"
exit_status=0
\\"$script_dir/ping_readiness_local.sh\\" $1 || exit_status=$?
\\"$script_dir/ping_readiness_master.sh\\" $1 || exit_status=$?
exit $exit_status",
      "ping_readiness_master.sh": "#!/bin/bash
export REDISCLI_AUTH=\\"$REDIS_MASTER_PASSWORD\\"
response=$(
  timeout -s 3 $1 \\\\
  redis-cli \\\\
    -h $REDIS_MASTER_HOST \\\\
    -p $REDIS_MASTER_PORT_NUMBER \\\\
    ping
)
if [ \\"$response\\" != \\"PONG\\" ]; then
  echo \\"$response\\"
  exit 1
fi",
      "ping_sentinel.sh": "#!/bin/bash
export REDISCLI_AUTH=\\"$REDIS_PASSWORD\\"
response=$(
  timeout -s 3 $1 \\\\
  redis-cli \\\\
    -h localhost \\\\
    -p $REDIS_SENTINEL_PORT \\\\
    ping
)
if [ \\"$response\\" != \\"PONG\\" ]; then
  echo \\"$response\\"
  exit 1
fi",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "labels": Object {
        "app": "redis",
        "chart": "redis-12.7.4",
        "heritage": "Helm",
        "release": "hello-helm-redis-c87c6cc5",
      },
      "name": "hello-helm-redis-c87c6cc5-health",
      "namespace": "default",
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "labels": Object {
        "app": "redis",
        "chart": "redis-12.7.4",
        "heritage": "Helm",
        "release": "hello-helm-redis-c87c6cc5",
      },
      "name": "hello-helm-redis-c87c6cc5-headless",
      "namespace": "default",
    },
    "spec": Object {
      "clusterIP": "None",
      "ports": Array [
        Object {
          "name": "redis",
          "port": 6379,
          "targetPort": "redis",
        },
        Object {
          "name": "redis-sentinel",
          "port": 26379,
          "targetPort": "redis-sentinel",
        },
      ],
      "publishNotReadyAddresses": true,
      "selector": Object {
        "app": "redis",
        "release": "hello-helm-redis-c87c6cc5",
      },
      "type": "ClusterIP",
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "labels": Object {
        "app": "redis",
        "chart": "redis-12.7.4",
        "heritage": "Helm",
        "release": "hello-helm-redis-c87c6cc5",
      },
      "name": "hello-helm-redis-c87c6cc5",
      "namespace": "default",
    },
    "spec": Object {
      "ports": Array [
        Object {
          "name": "redis",
          "port": 6379,
          "targetPort": "redis",
        },
        Object {
          "name": "redis-sentinel",
          "port": 26379,
          "targetPort": "redis-sentinel",
        },
      ],
      "selector": Object {
        "app": "redis",
        "release": "hello-helm-redis-c87c6cc5",
      },
      "type": "ClusterIP",
    },
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": Object {
      "labels": Object {
        "app": "redis",
        "chart": "redis-12.7.4",
        "heritage": "Helm",
        "release": "hello-helm-redis-c87c6cc5",
      },
      "name": "hello-helm-redis-c87c6cc5-node",
      "namespace": "default",
    },
    "spec": Object {
      "replicas": 2,
      "selector": Object {
        "matchLabels": Object {
          "app": "redis",
          "release": "hello-helm-redis-c87c6cc5",
          "role": "node",
        },
      },
      "serviceName": "hello-helm-redis-c87c6cc5-headless",
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "checksum/configmap": "814139d66a465c8c4f6eef73af6caf436be9c913a0d9f64fafc437566e90f966",
            "checksum/health": "6a5a705c8ebfb3b057015b935bab189badc801be9a748388caa0ffb4c57b8847",
            "checksum/secret": "b0f33755157a61e535ee838c16fa03a9be53b31f51424ab55704ea5f54743c00",
          },
          "labels": Object {
            "app": "redis",
            "chart": "redis-12.7.4",
            "release": "hello-helm-redis-c87c6cc5",
            "role": "node",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "command": Array [
                "/bin/bash",
                "-c",
                "/opt/bitnami/scripts/start-scripts/start-node.sh",
              ],
              "env": Array [
                Object {
                  "name": "REDIS_MASTER_PORT_NUMBER",
                  "value": "6379",
                },
                Object {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "hello-helm-redis-c87c6cc5",
                    },
                  },
                },
                Object {
                  "name": "REDIS_MASTER_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "hello-helm-redis-c87c6cc5",
                    },
                  },
                },
                Object {
                  "name": "REDIS_TLS_ENABLED",
                  "value": "no",
                },
                Object {
                  "name": "REDIS_PORT",
                  "value": "6379",
                },
                Object {
                  "name": "REDIS_DATA_DIR",
                  "value": "/data",
                },
              ],
              "image": "docker.io/bitnami/redis:6.0.10-debian-10-r19",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "exec": Object {
                  "command": Array [
                    "sh",
                    "-c",
                    "/health/ping_liveness_local.sh 5",
                  ],
                },
                "failureThreshold": 5,
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
              },
              "name": "redis",
              "ports": Array [
                Object {
                  "containerPort": 6379,
                  "name": "redis",
                },
              ],
              "readinessProbe": Object {
                "exec": Object {
                  "command": Array [
                    "sh",
                    "-c",
                    "/health/ping_readiness_local.sh 5",
                  ],
                },
                "failureThreshold": 5,
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 10,
              },
              "securityContext": Object {
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/opt/bitnami/scripts/start-scripts",
                  "name": "start-scripts",
                },
                Object {
                  "mountPath": "/health",
                  "name": "health",
                },
                Object {
                  "mountPath": "/data",
                  "name": "redis-data",
                },
                Object {
                  "mountPath": "/opt/bitnami/redis/mounted-etc",
                  "name": "config",
                },
                Object {
                  "mountPath": "/opt/bitnami/redis/etc",
                  "name": "redis-tmp-conf",
                },
              ],
            },
            Object {
              "command": Array [
                "/bin/bash",
                "-c",
                "/opt/bitnami/scripts/start-scripts/start-sentinel.sh",
              ],
              "env": Array [
                Object {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "hello-helm-redis-c87c6cc5",
                    },
                  },
                },
                Object {
                  "name": "REDIS_SENTINEL_TLS_ENABLED",
                  "value": "no",
                },
                Object {
                  "name": "REDIS_SENTINEL_PORT",
                  "value": "26379",
                },
              ],
              "image": "docker.io/bitnami/redis-sentinel:6.0.10-debian-10-r18",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "exec": Object {
                  "command": Array [
                    "sh",
                    "-c",
                    "/health/ping_sentinel.sh 5",
                  ],
                },
                "failureThreshold": 5,
                "initialDelaySeconds": 5,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 5,
              },
              "name": "sentinel",
              "ports": Array [
                Object {
                  "containerPort": 26379,
                  "name": "redis-sentinel",
                },
              ],
              "readinessProbe": Object {
                "exec": Object {
                  "command": Array [
                    "sh",
                    "-c",
                    "/health/ping_sentinel.sh 5",
                  ],
                },
                "failureThreshold": 5,
                "initialDelaySeconds": 5,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "securityContext": Object {
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/opt/bitnami/scripts/start-scripts",
                  "name": "start-scripts",
                },
                Object {
                  "mountPath": "/health",
                  "name": "health",
                },
                Object {
                  "mountPath": "/data",
                  "name": "redis-data",
                },
                Object {
                  "mountPath": "/opt/bitnami/redis-sentinel/mounted-etc",
                  "name": "config",
                },
                Object {
                  "mountPath": "/opt/bitnami/redis-sentinel/etc",
                  "name": "sentinel-tmp-conf",
                },
              ],
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "default",
          "volumes": Array [
            Object {
              "configMap": Object {
                "defaultMode": 493,
                "name": "hello-helm-redis-c87c6cc5-scripts",
              },
              "name": "start-scripts",
            },
            Object {
              "configMap": Object {
                "defaultMode": 493,
                "name": "hello-helm-redis-c87c6cc5-health",
              },
              "name": "health",
            },
            Object {
              "configMap": Object {
                "name": "hello-helm-redis-c87c6cc5",
              },
              "name": "config",
            },
            Object {
              "emptyDir": Object {},
              "name": "sentinel-tmp-conf",
            },
            Object {
              "emptyDir": Object {},
              "name": "redis-tmp-conf",
            },
          ],
        },
      },
      "updateStrategy": Object {
        "type": "RollingUpdate",
      },
      "volumeClaimTemplates": Array [
        Object {
          "metadata": Object {
            "labels": Object {
              "app": "redis",
              "component": "slave",
              "heritage": "Helm",
              "release": "hello-helm-redis-c87c6cc5",
            },
            "name": "redis-data",
          },
          "spec": Object {
            "accessModes": Array [
              "ReadWriteOnce",
            ],
            "resources": Object {
              "requests": Object {
                "storage": "8Gi",
              },
            },
          },
        },
      ],
    },
  },
]
`;
