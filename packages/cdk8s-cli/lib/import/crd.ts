import { TypeGenerator } from './type-generator';
import { ImportBase } from './base';
import { CodeMaker } from 'codemaker';
import { httpGet, httpsGet } from '../util';
import * as yaml from 'yaml';
import * as fs from 'fs-extra';
import * as path from 'path';
import { ImportSpec } from '../config';

const CRD_KIND = 'CustomResourceDefinition';

export interface CustomResourceApiObject {
  apiVersion?: string;
  kind?: string;
  metadata?: {
    name?: string;
  };
  spec?: {
    group: string;
    names: {
      kind: string;
    };
    versions?: Array<{ name: string; schema?: { openAPIV3Schema?: any } }>;
    version?: string;
    validation?: { openAPIV3Schema?: any };
  };
}

// all these APIs are compatible from our perspective.
const SUPPORTED_API_VERSIONS = [
  'apiextensions.k8s.io/v1beta1',
  'apiextensions.k8s.io/v1'
];

export class CustomResourceDefinition {
  private readonly schema?: any;
  private readonly group: string;
  private readonly version: string;
  private readonly kind: string;
  private readonly fqn: string;

  constructor(manifest: CustomResourceApiObject) {
    const apiVersion = manifest?.apiVersion ?? 'undefined';
    assert(SUPPORTED_API_VERSIONS.includes(apiVersion), `"apiVersion" is "${apiVersion}" but it should be one of: ${SUPPORTED_API_VERSIONS.map(x => `"${x}"`).join(', ')}`);
    assert(manifest.kind === CRD_KIND, `"kind" must be "${CRD_KIND}"`);

    const spec = manifest.spec;
    if (!spec) {
      throw new Error(`manifest does not have a "spec" attribute`)
    }

    const version = spec.version ?? (spec.versions ?? [])[0];
    if (!version) {
      throw new Error(`unable to determine CRD version`);
    }

    if (!manifest.metadata?.name) {
      throw new Error(`"metadata.name" is required`);
    }

    const schema = typeof version === 'string'
      ? spec.validation?.openAPIV3Schema
      : version?.schema?.openAPIV3Schema ?? spec.validation?.openAPIV3Schema;

    this.schema = schema;
    this.group = spec.group;
    this.version = typeof version === 'string' ? version : version.name;
    this.kind = spec.names.kind;
    this.fqn = this.kind;
  }

  public get moduleName() {
    return this.kind.toLocaleLowerCase();
  }

  public async generateTypeScript(code: CodeMaker) {
    const types = new TypeGenerator();

    types.emitConstruct({
      group: this.group,
      version: this.version,
      kind: this.kind,
      fqn: this.fqn,
      schema: this.schema
    });

    code.line(`// generated by cdk8s`);
    code.line(`import { ApiObject } from 'cdk8s';`);
    code.line(`import { Construct } from 'constructs';`);
    code.line();
    types.generate(code);
  }
}

export class ImportCustomResourceDefinition extends ImportBase {
  public static async match(importSpec: ImportSpec): Promise<undefined | CustomResourceApiObject[]> {
    const { source } = importSpec;
    let manifest;
    if (source.startsWith('https://')) {
      manifest = await httpsGet(source);
    } else if (source.startsWith('http://')) {
        manifest = await httpGet(source)
    } else if (path.extname(source) === '.yaml' || path.extname(source) === '.yml' || path.extname(source) === '.json') {
      if (!(await fs.pathExists(source))) {
        throw new Error(`can't find file ${source}`);
      }

      manifest = await fs.readFile(source, 'utf-8');
    }

    if (!manifest) {
      return undefined;
    }

    return yaml.parseAllDocuments(manifest).map((doc: yaml.ast.Document) => doc.toJSON());
  }

  private readonly defs: CustomResourceDefinition[] = [];

  constructor(manifest: CustomResourceApiObject[]) {
    super();

    this.defs = manifest
      .filter(obj => obj) // filter empty docs in the manifest
      .filter(obj => obj.kind === CRD_KIND) // filter non-CRD resources from the manifest
      .map(obj => new CustomResourceDefinition(obj));
  }

  public get moduleNames() {
    return this.defs.map(crd => crd.moduleName);
  }

  protected async generateTypeScript(code: CodeMaker, moduleName: string) {
    this.defs.filter(crd => moduleName === crd.moduleName).map(crd => crd.generateTypeScript(code));
  }
}

function assert(condition: boolean, message: string) {
  if (!condition) {
    throw new Error(`invalid CustomResourceDefinition manifest: ${message}`);
  }
}
